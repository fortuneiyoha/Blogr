// -----------------------------------------------------------------------------
// This file contains CSS helper classes.
// -----------------------------------------------------------------------------

@use "../abstracts/" as *;

/**
 * ┌────────────────────────────────────────────────────────┐
 * │                 Hidden Element Classes                 │
 * └────────────────────────────────────────────────────────┘
 */

// Hide element while making it readable for screen readers
.visually-hidden {
  @include visually-hidden;

  &-focusable:not(:focus):not(:focus-within) {
    @extend .visually-hidden;
  }
}

/**
 * ┌────────────────────────────────────────────────────────┐
 * │                       Text Classes                     │
 * └────────────────────────────────────────────────────────┘
 */

//
// Alignment
//
@each $align in $text-align {
  .text-#{$align} {
    text-align: #{$align};
  }
}

//
// Sizes
//
@each $size, $value in $text-sizes {
  .text-#{$size} {
    font-size: #{$value};
  }
}

//
// Color
//
@each $color, $value in $util-colors {
  .text-#{$color} {
    color: #{$value};
  }
}

//
// Semantic
//
.lead {
  font-size: var(--fs-lead);
  font-weight: var(--fw-light);
}

//
// Weight
//
// Font Weights
@each $weight in map-keys($font-weights) {
  .fw-#{$weight} {
    font-weight: var(--fw-#{$weight});
  }
}

/**
 * ┌────────────────────────────────────────────────────────┐
 * │                      Spacer Classes                    │
 * └────────────────────────────────────────────────────────┘
 */

// * Automatically generate classes for each spacer property
// * based on the $util-spacers map -> key, values.
// * Generated in the order
// * -> auto, 0, inline, block, top, right, bottom, left

//
// Margin
//
@each $spacer, $value in $util-spacers {
  @each $class in $margin {
    @if $class == m {
      .#{$class}-#{$spacer} {
        margin: $value;
      }
    } @else if $class == mx {
      .#{$class}-#{$spacer} {
        margin-inline: $value;
      }
    } @else if $class == my {
      .#{$class}-#{$spacer} {
        margin-block: $value;
      }
    } @else if $class == mt {
      .#{$class}-#{$spacer} {
        margin-block-start: $value;
      }
    } @else if $class == me {
      .#{$class}-#{$spacer} {
        margin-inline-end: $value;
      }
    } @else if $class == mb {
      .#{$class}-#{$spacer} {
        margin-block-end: $value;
      }
    } @else if $class == ms {
      .#{$class}-#{$spacer} {
        margin-inline-start: $value;
      }
    } @else {
      .#{$class}-#{$spacer} {
        margin: initial;
      }
    }
  }
}

//
// Padding
//
@each $spacer, $value in $util-spacers {
  @each $class in $padding {
    @if $class == p {
      .#{$class}-#{$spacer} {
        padding: $value;
      }
    } @else if $class == px {
      .#{$class}-#{$spacer} {
        padding-inline: $value;
      }
    } @else if $class == py {
      .#{$class}-#{$spacer} {
        padding-block: $value;
      }
    } @else if $class == pt {
      .#{$class}-#{$spacer} {
        padding-block-start: $value;
      }
    } @else if $class == pe {
      .#{$class}-#{$spacer} {
        padding-inline-end: $value;
      }
    } @else if $class == pb {
      .#{$class}-#{$spacer} {
        padding-block-end: $value;
      }
    } @else if $class == ps {
      .#{$class}-#{$spacer} {
        padding-inline-start: $value;
      }
    } @else {
      .#{$class}-#{$spacer} {
        padding: initial;
      }
    }
  }
}
